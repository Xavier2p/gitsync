searchState.loadedDescShard("gsync", 0, "<em>A tool to earn time at each <code>git</code> actions.</em>\nArgs Module\nCreate a commit message with the given type, message and …\nGit Module\nThe main function.\nParse the command and return the commit message.\nThe arguments parser.\nChanges that affect the build system or external …\nUpdating grunt tasks etc; no production code change\nChanges on the CI/CD pipeline or other DevOps tools\nChanges to the documentation\nNew feature for the user, not a new feature for build …\nBug fix for the user, not a fix to a build script\nA new performance improvement\nRefactoring production code, eg. renaming a variable\nFormatting, missing semi colons, etc; no production code …\nAdding missing tests, refactoring tests; no production …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf used, the commit won’t be pushed, only committed.\nSign the commit.\nTag to assign at the commit.\nAdd only the updated files.\nEnable verbose mode.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nMessage used as description for the commit.\nScope\nScope\nScope\nScope\nScope\nScope\nScope\nScope\nScope\nScope\nStages the files.\nCreates a commit with the given message.\nGets the 10 last logs of the repository. Displays with the …\nPush the changes to the remote.\nPush the tags to the remote.\nGets the status of the repository.\nTag the commit with the given tag.")